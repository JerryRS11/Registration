pragma solidity 0.6.6;
contract Identity{
    struct Person {
        string name;
        uint age;
        uint height;
        bool senior;
    }
    
// Events are members in smart contracts that store arguments from the transaction and inform the current state of the smart contracts
// Create an event that can bring up a notification when a user is created or deleted in the system
event personCreated (string name, bool senior);
event personDeleted (string name, bool senior, address deletedBy);

// Modifiers prevent code duplication 
modifier onlyOwner () {
    require (msg.sender == owner);
    _; //Continue the execution solidity code
}

modifier costs (uint cost) {
    require (msg.value >= cost); //msg.value used for asking for money
    _; //Continue the execution solidity code
}

address public owner;
uint public balance; //create a function that gets a number from the system
// Define the owner as default to use it later  
constructor () public{
    owner = msg.sender;
}

// Create a mapping to structure the database and create a dictionary of the list of people      
mapping (address => Person) private people;
address [] private creators;

// Create a function to get people's costs 
function createPerson (string memory name, uint age, uint height) public payable costs (1 ether) {
require (age < 150, "age must be less than 150");
// the use of balance here is to know how much money the user has in the system. 
//balance += msg.value; means balance = 0 + 1, because this also means that balance = balance + msg.value 
balance += msg.value;

//this adds the value to the balance that you defined as a state variable above.

Person memory newPerson;
newPerson.name = name;
newPerson.age = age;
newPerson.height = height;

// Create an if condition of users age to see if he/she is senior or not

if (age >=65){
    newPerson.senior = true;
}
else {
    newPerson.senior = false;
}

//Create a link between the public and private function

    insertPerson(newPerson);
    
// Create a push to add people to the list and use assert to validate people's invariance

    creators.push (msg.sender);
    
// Pack (abi.encodePacked) and hash (keccak256) to get an hexadecimal string

    assert (
        keccak256 (
            abi.encodePacked (
                people[msg.sender].name, 
                people[msg.sender].age, 
                people[msg.sender].height, 
                people[msg.sender].senior)) 
                == 
        keccak256 (
            abi.encodePacked (
                newPerson.name, 
                newPerson.age, 
                newPerson.height, 
                newPerson.senior)));
                
//Use event creation to support the notification

emit personCreated (newPerson.name, newPerson.senior);
}

//Create a function that can add people to the list (private function)
// The address creator is the one who inputs the information

function insertPerson (Person memory newPerson) private{
    address creator = msg.sender;
    people[creator] = newPerson;
}

//Create a function that can get only user's information and not everyone's information

function getPerson () public view returns (string memory name, uint age, uint height, bool senior) {
    address creator = msg.sender;
    return (people[creator].name, people[creator].age, people[creator].height, people[creator].senior);
}

//Create a function that allows the owner to delete a person registered in the system
// Validate that users information is = 0 using assert()

function deletePerson (address creator) public onlyOwner {
    string memory name = people[creator].name;
    bool senior = people[creator].senior;
    delete people[creator];
    assert (people[creator].age ==0);
    emit personDeleted (name, senior, msg.sender);

}

// Create a function that can create a address of registered people

function getCreator (uint index) public view onlyOwner returns (address){
    return creators[index];
}


//Create a function that can withdraw the ether
  function withdrawAll () public onlyOwner returns (uint){
        uint toTransfer = balance; // This is the balance inside the wallet.
        balance = 0; // this is the balance displayed after withdrawing the money.
        if (msg.sender.send (toTransfer)){
        return toTransfer; // the owner receives the balance inside the wallet.
    }
    else {
        balance = toTransfer; // the balance displayed is the balance inside the wallet with no changes.
        return 0; // the owner receives nothing (zero)
        }
    }
}
